---
- name: Configure haproxy on the haproxy vm
  hosts: tag_FWProt_http
  become: yes

  vars:
    haproxy_block: |
      {% for host in groups['tag_Ansible_nginx'] %}
          server {{ hostvars[host]['ansible_fqdn'] }} {{ hostvars[host]['ansible_default_ipv4']['address'] }}:80 cookie {{ hostvars[host]['ansible_fqdn'] }} check
      {% endfor %}
    haproxy_ip: >
      {% for host in groups['tag_Ansible_haproxy'] %}
      {{ hostvars[host]['ansible_host'] }}
      {% endfor %}

  tasks:
    - name: Add nginx hostnames and IP addresses to haproxy config
      blockinfile: 
        path: /etc/haproxy/haproxy.cfg
        state: present
        insertafter: '^    cookie'
        block: "{{ haproxy_block }}"
      when: '"tag_Ansible_haproxy" in group_names'
      notify: restart haproxy

  handlers:
    - name: restart haproxy
      service:
        name: haproxy
        state: restarted
      when: '"tag_Ansible_haproxy" in group_names'

# separate play is required to ensure handler in the play above is executed after a config change, otherwise the test will fail
- name: Test if the haproxy is server pages correctly
  hosts: tag_FWProt_http

  tasks:
    - name: Test access to the web page through the loadbalancer
      uri:
        url: "http://{{ haproxy_ip | trim }}"
        return_content: true
      register: result
      delegate_to: localhost
      when: '"tag_Ansible_haproxy" in group_names'
      failed_when: '"reached NGINX on server" not in result.content'